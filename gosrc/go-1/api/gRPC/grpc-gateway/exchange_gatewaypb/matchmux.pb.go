// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: matchmux.proto

package exchange_gatewaypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrderSide defines whether an order is a buy or a sell.
type OrderSide int32

const (
	OrderSide_SIDE_UNKNOWN OrderSide = 0
	OrderSide_BUY          OrderSide = 1
	OrderSide_SELL         OrderSide = 2
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "SIDE_UNKNOWN",
		1: "BUY",
		2: "SELL",
	}
	OrderSide_value = map[string]int32{
		"SIDE_UNKNOWN": 0,
		"BUY":          1,
		"SELL":         2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmux_proto_enumTypes[0].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_matchmux_proto_enumTypes[0]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{0}
}

// OrderType defines the type of order (e.g., Market, Limit).
type OrderType int32

const (
	OrderType_ORDER_TYPE_UNKNOWN OrderType = 0
	OrderType_LIMIT              OrderType = 1 // An order to buy or sell at a specific price or better.
	OrderType_MARKET             OrderType = 2 // An order to buy or sell immediately at the best available price.
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNKNOWN",
		1: "LIMIT",
		2: "MARKET",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNKNOWN": 0,
		"LIMIT":              1,
		"MARKET":             2,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmux_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_matchmux_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{1}
}

// OrderStatus defines the current state of an order in the matching engine.
type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNKNOWN OrderStatus = 0
	OrderStatus_NEW                  OrderStatus = 1 // Order received by the gateway.
	OrderStatus_ACKNOWLEDGED         OrderStatus = 2 // Order successfully acknowledged by the matching engine.
	OrderStatus_PARTIALLY_FILLED     OrderStatus = 3 // Order has been partially matched and filled.
	OrderStatus_FILLED               OrderStatus = 4 // Order has been completely matched and filled.
	OrderStatus_CANCELED             OrderStatus = 5 // Order has been successfully canceled.
	OrderStatus_REJECTED             OrderStatus = 6 // Order was rejected due to validation or risk checks.
	OrderStatus_EXPIRED              OrderStatus = 7 // Order expired (e.g., Good-Till-Day orders at end of day).
	OrderStatus_PENDING_CANCEL       OrderStatus = 8 // Cancellation request received, but not yet processed.
	OrderStatus_PENDING_REPLACE      OrderStatus = 9 // Modification request received, but not yet processed.
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNKNOWN",
		1: "NEW",
		2: "ACKNOWLEDGED",
		3: "PARTIALLY_FILLED",
		4: "FILLED",
		5: "CANCELED",
		6: "REJECTED",
		7: "EXPIRED",
		8: "PENDING_CANCEL",
		9: "PENDING_REPLACE",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNKNOWN": 0,
		"NEW":                  1,
		"ACKNOWLEDGED":         2,
		"PARTIALLY_FILLED":     3,
		"FILLED":               4,
		"CANCELED":             5,
		"REJECTED":             6,
		"EXPIRED":              7,
		"PENDING_CANCEL":       8,
		"PENDING_REPLACE":      9,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmux_proto_enumTypes[2].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_matchmux_proto_enumTypes[2]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{2}
}

// ExecutionType defines the type of execution report.
type ExecutionType int32

const (
	ExecutionType_EXEC_TYPE_UNKNOWN ExecutionType = 0
	ExecutionType_NEW_EXECUTION     ExecutionType = 1 // Initial acknowledgement of a new order.
	ExecutionType_TRADE_EXECUTION   ExecutionType = 2 // A trade (fill) occurred.
	ExecutionType_CANCEL_EXECUTION  ExecutionType = 3 // An order was canceled.
	ExecutionType_REJECT_EXECUTION  ExecutionType = 4 // An order was rejected.
	ExecutionType_MODIFY_EXECUTION  ExecutionType = 5 // An order was modified.
)

// Enum value maps for ExecutionType.
var (
	ExecutionType_name = map[int32]string{
		0: "EXEC_TYPE_UNKNOWN",
		1: "NEW_EXECUTION",
		2: "TRADE_EXECUTION",
		3: "CANCEL_EXECUTION",
		4: "REJECT_EXECUTION",
		5: "MODIFY_EXECUTION",
	}
	ExecutionType_value = map[string]int32{
		"EXEC_TYPE_UNKNOWN": 0,
		"NEW_EXECUTION":     1,
		"TRADE_EXECUTION":   2,
		"CANCEL_EXECUTION":  3,
		"REJECT_EXECUTION":  4,
		"MODIFY_EXECUTION":  5,
	}
)

func (x ExecutionType) Enum() *ExecutionType {
	p := new(ExecutionType)
	*p = x
	return p
}

func (x ExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmux_proto_enumTypes[3].Descriptor()
}

func (ExecutionType) Type() protoreflect.EnumType {
	return &file_matchmux_proto_enumTypes[3]
}

func (x ExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionType.Descriptor instead.
func (ExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{3}
}

// NewOrder represents a request to place a new order.
type NewOrder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientOrderId string                 `protobuf:"bytes,1,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`                    // Unique ID assigned by the client (broker).
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                         // Trading instrument (e.g., "AAPL", "INFY").
	Side          OrderSide              `protobuf:"varint,3,opt,name=side,proto3,enum=exchange_gateway.OrderSide" json:"side,omitempty"`                            // BUY or SELL.
	OrderType     OrderType              `protobuf:"varint,4,opt,name=order_type,json=orderType,proto3,enum=exchange_gateway.OrderType" json:"order_type,omitempty"` // LIMIT or MARKET.
	Price         float64                `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`                                                         // Price for LIMIT orders. Ignored for MARKET.
	Quantity      int64                  `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                    // Total quantity of shares/contracts.
	TraderId      string                 `protobuf:"bytes,7,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`                                     // Identifier for the client/trader.
	TimestampNs   int64                  `protobuf:"varint,8,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`                           // Nanosecond timestamp when order was created by client.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewOrder) Reset() {
	*x = NewOrder{}
	mi := &file_matchmux_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrder) ProtoMessage() {}

func (x *NewOrder) ProtoReflect() protoreflect.Message {
	mi := &file_matchmux_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrder.ProtoReflect.Descriptor instead.
func (*NewOrder) Descriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{0}
}

func (x *NewOrder) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *NewOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NewOrder) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_SIDE_UNKNOWN
}

func (x *NewOrder) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNKNOWN
}

func (x *NewOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NewOrder) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *NewOrder) GetTraderId() string {
	if x != nil {
		return x.TraderId
	}
	return ""
}

func (x *NewOrder) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

// CancelOrderRequest represents a request to cancel an existing order.
type CancelOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientOrderId string                 `protobuf:"bytes,1,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"` // Original client order ID of the order to cancel.
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                      // Symbol of the order to cancel.
	TraderId      string                 `protobuf:"bytes,3,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`                  // Identifier for the client/trader.
	TimestampNs   int64                  `protobuf:"varint,4,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`        // Nanosecond timestamp when cancel request was created.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	mi := &file_matchmux_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmux_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{1}
}

func (x *CancelOrderRequest) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *CancelOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CancelOrderRequest) GetTraderId() string {
	if x != nil {
		return x.TraderId
	}
	return ""
}

func (x *CancelOrderRequest) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

// ModifyOrderRequest represents a request to modify an existing order (e.g., quantity, price).
type ModifyOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientOrderId string                 `protobuf:"bytes,1,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"` // Original client order ID of the order to modify.
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                      // Symbol of the order to modify.
	TraderId      string                 `protobuf:"bytes,3,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`                  // Identifier for the client/trader.
	TimestampNs   int64                  `protobuf:"varint,4,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`        // Nanosecond timestamp when modify request was created.
	// Fields to modify (use wrapper types for optionality if needed, or check for non-zero values)
	NewQuantity   int64   `protobuf:"varint,5,opt,name=new_quantity,json=newQuantity,proto3" json:"new_quantity,omitempty"` // New total quantity for the order.
	NewPrice      float64 `protobuf:"fixed64,6,opt,name=new_price,json=newPrice,proto3" json:"new_price,omitempty"`         // New price for a limit order.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyOrderRequest) Reset() {
	*x = ModifyOrderRequest{}
	mi := &file_matchmux_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrderRequest) ProtoMessage() {}

func (x *ModifyOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmux_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrderRequest.ProtoReflect.Descriptor instead.
func (*ModifyOrderRequest) Descriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{2}
}

func (x *ModifyOrderRequest) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *ModifyOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ModifyOrderRequest) GetTraderId() string {
	if x != nil {
		return x.TraderId
	}
	return ""
}

func (x *ModifyOrderRequest) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *ModifyOrderRequest) GetNewQuantity() int64 {
	if x != nil {
		return x.NewQuantity
	}
	return 0
}

func (x *ModifyOrderRequest) GetNewPrice() float64 {
	if x != nil {
		return x.NewPrice
	}
	return 0
}

// OrderRequest is a oneof message that encapsulates all possible request types from the client.
type OrderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*OrderRequest_NewOrder
	//	*OrderRequest_CancelOrder
	//	*OrderRequest_ModifyOrder
	RequestType   isOrderRequest_RequestType `protobuf_oneof:"request_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	mi := &file_matchmux_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmux_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{3}
}

func (x *OrderRequest) GetRequestType() isOrderRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *OrderRequest) GetNewOrder() *NewOrder {
	if x != nil {
		if x, ok := x.RequestType.(*OrderRequest_NewOrder); ok {
			return x.NewOrder
		}
	}
	return nil
}

func (x *OrderRequest) GetCancelOrder() *CancelOrderRequest {
	if x != nil {
		if x, ok := x.RequestType.(*OrderRequest_CancelOrder); ok {
			return x.CancelOrder
		}
	}
	return nil
}

func (x *OrderRequest) GetModifyOrder() *ModifyOrderRequest {
	if x != nil {
		if x, ok := x.RequestType.(*OrderRequest_ModifyOrder); ok {
			return x.ModifyOrder
		}
	}
	return nil
}

type isOrderRequest_RequestType interface {
	isOrderRequest_RequestType()
}

type OrderRequest_NewOrder struct {
	NewOrder *NewOrder `protobuf:"bytes,1,opt,name=new_order,json=newOrder,proto3,oneof"`
}

type OrderRequest_CancelOrder struct {
	CancelOrder *CancelOrderRequest `protobuf:"bytes,2,opt,name=cancel_order,json=cancelOrder,proto3,oneof"`
}

type OrderRequest_ModifyOrder struct {
	ModifyOrder *ModifyOrderRequest `protobuf:"bytes,3,opt,name=modify_order,json=modifyOrder,proto3,oneof"` // Add other request types like inquire, heartbeat etc.
}

func (*OrderRequest_NewOrder) isOrderRequest_RequestType() {}

func (*OrderRequest_CancelOrder) isOrderRequest_RequestType() {}

func (*OrderRequest_ModifyOrder) isOrderRequest_RequestType() {}

// Trade represents a successful match and execution.
type Trade struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TradeId         string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                                                    // Unique ID for the trade (generated by the exchange).
	ClientOrderId   string                 `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`                                // Original client order ID that resulted in this trade.
	ExchangeOrderId string                 `protobuf:"bytes,3,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`                          // Unique ID assigned by the exchange for the order.
	Symbol          string                 `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                     // Trading instrument.
	Price           float64                `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`                                                                     // Execution price.
	Quantity        int64                  `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                // Executed quantity.
	AggressorSide   OrderSide              `protobuf:"varint,7,opt,name=aggressor_side,json=aggressorSide,proto3,enum=exchange_gateway.OrderSide" json:"aggressor_side,omitempty"` // Side of the order that initiated the trade (e.g., Market order aggresses resting Limit order).
	TimestampNs     int64                  `protobuf:"varint,8,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`                                       // Nanosecond timestamp when trade occurred.
	BuyerTraderId   string                 `protobuf:"bytes,9,opt,name=buyer_trader_id,json=buyerTraderId,proto3" json:"buyer_trader_id,omitempty"`                                // Trader ID of the buyer.
	SellerTraderId  string                 `protobuf:"bytes,10,opt,name=seller_trader_id,json=sellerTraderId,proto3" json:"seller_trader_id,omitempty"`                            // Trader ID of the seller.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_matchmux_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_matchmux_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{4}
}

func (x *Trade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Trade) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *Trade) GetExchangeOrderId() string {
	if x != nil {
		return x.ExchangeOrderId
	}
	return ""
}

func (x *Trade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetAggressorSide() OrderSide {
	if x != nil {
		return x.AggressorSide
	}
	return OrderSide_SIDE_UNKNOWN
}

func (x *Trade) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *Trade) GetBuyerTraderId() string {
	if x != nil {
		return x.BuyerTraderId
	}
	return ""
}

func (x *Trade) GetSellerTraderId() string {
	if x != nil {
		return x.SellerTraderId
	}
	return ""
}

// OrderUpdate provides status updates for an order.
type OrderUpdate struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ClientOrderId     string                 `protobuf:"bytes,1,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`                                    // Original client order ID.
	ExchangeOrderId   string                 `protobuf:"bytes,2,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`                              // Unique ID assigned by the exchange for the order.
	Symbol            string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                         // Trading instrument.
	Status            OrderStatus            `protobuf:"varint,4,opt,name=status,proto3,enum=exchange_gateway.OrderStatus" json:"status,omitempty"`                                      // Current status of the order.
	ExecutionType     ExecutionType          `protobuf:"varint,5,opt,name=execution_type,json=executionType,proto3,enum=exchange_gateway.ExecutionType" json:"execution_type,omitempty"` // Type of execution report.
	FilledQuantity    int64                  `protobuf:"varint,6,opt,name=filled_quantity,json=filledQuantity,proto3" json:"filled_quantity,omitempty"`                                  // Total quantity filled so far.
	RemainingQuantity int64                  `protobuf:"varint,7,opt,name=remaining_quantity,json=remainingQuantity,proto3" json:"remaining_quantity,omitempty"`                         // Quantity still open.
	LastFillPrice     float64                `protobuf:"fixed64,8,opt,name=last_fill_price,json=lastFillPrice,proto3" json:"last_fill_price,omitempty"`                                  // Price of the last fill (if applicable).
	LastFillQuantity  int64                  `protobuf:"varint,9,opt,name=last_fill_quantity,json=lastFillQuantity,proto3" json:"last_fill_quantity,omitempty"`                          // Quantity of the last fill (if applicable).
	TimestampNs       int64                  `protobuf:"varint,10,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`                                          // Nanosecond timestamp of this update.
	Message           string                 `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`                                                                      // Optional descriptive message (e.g., rejection reason).
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OrderUpdate) Reset() {
	*x = OrderUpdate{}
	mi := &file_matchmux_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUpdate) ProtoMessage() {}

func (x *OrderUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_matchmux_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUpdate.ProtoReflect.Descriptor instead.
func (*OrderUpdate) Descriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{5}
}

func (x *OrderUpdate) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *OrderUpdate) GetExchangeOrderId() string {
	if x != nil {
		return x.ExchangeOrderId
	}
	return ""
}

func (x *OrderUpdate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderUpdate) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNKNOWN
}

func (x *OrderUpdate) GetExecutionType() ExecutionType {
	if x != nil {
		return x.ExecutionType
	}
	return ExecutionType_EXEC_TYPE_UNKNOWN
}

func (x *OrderUpdate) GetFilledQuantity() int64 {
	if x != nil {
		return x.FilledQuantity
	}
	return 0
}

func (x *OrderUpdate) GetRemainingQuantity() int64 {
	if x != nil {
		return x.RemainingQuantity
	}
	return 0
}

func (x *OrderUpdate) GetLastFillPrice() float64 {
	if x != nil {
		return x.LastFillPrice
	}
	return 0
}

func (x *OrderUpdate) GetLastFillQuantity() int64 {
	if x != nil {
		return x.LastFillQuantity
	}
	return 0
}

func (x *OrderUpdate) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *OrderUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GatewayResponse is a oneof message that encapsulates all possible response types to the client.
type GatewayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ResponseType:
	//
	//	*GatewayResponse_OrderUpdate
	//	*GatewayResponse_Trade
	ResponseType  isGatewayResponse_ResponseType `protobuf_oneof:"response_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayResponse) Reset() {
	*x = GatewayResponse{}
	mi := &file_matchmux_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayResponse) ProtoMessage() {}

func (x *GatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmux_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayResponse.ProtoReflect.Descriptor instead.
func (*GatewayResponse) Descriptor() ([]byte, []int) {
	return file_matchmux_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayResponse) GetResponseType() isGatewayResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return nil
}

func (x *GatewayResponse) GetOrderUpdate() *OrderUpdate {
	if x != nil {
		if x, ok := x.ResponseType.(*GatewayResponse_OrderUpdate); ok {
			return x.OrderUpdate
		}
	}
	return nil
}

func (x *GatewayResponse) GetTrade() *Trade {
	if x != nil {
		if x, ok := x.ResponseType.(*GatewayResponse_Trade); ok {
			return x.Trade
		}
	}
	return nil
}

type isGatewayResponse_ResponseType interface {
	isGatewayResponse_ResponseType()
}

type GatewayResponse_OrderUpdate struct {
	OrderUpdate *OrderUpdate `protobuf:"bytes,1,opt,name=order_update,json=orderUpdate,proto3,oneof"`
}

type GatewayResponse_Trade struct {
	Trade *Trade `protobuf:"bytes,2,opt,name=trade,proto3,oneof"` // Add other response types like heartbeat acknowledgements, etc.
}

func (*GatewayResponse_OrderUpdate) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_Trade) isGatewayResponse_ResponseType() {}

var File_matchmux_proto protoreflect.FileDescriptor

const file_matchmux_proto_rawDesc = "" +
	"\n" +
	"\x0ematchmux.proto\x12\x10exchange_gateway\"\xa9\x02\n" +
	"\bNewOrder\x12&\n" +
	"\x0fclient_order_id\x18\x01 \x01(\tR\rclientOrderId\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12/\n" +
	"\x04side\x18\x03 \x01(\x0e2\x1b.exchange_gateway.OrderSideR\x04side\x12:\n" +
	"\n" +
	"order_type\x18\x04 \x01(\x0e2\x1b.exchange_gateway.OrderTypeR\torderType\x12\x14\n" +
	"\x05price\x18\x05 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x06 \x01(\x03R\bquantity\x12\x1b\n" +
	"\ttrader_id\x18\a \x01(\tR\btraderId\x12!\n" +
	"\ftimestamp_ns\x18\b \x01(\x03R\vtimestampNs\"\x94\x01\n" +
	"\x12CancelOrderRequest\x12&\n" +
	"\x0fclient_order_id\x18\x01 \x01(\tR\rclientOrderId\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1b\n" +
	"\ttrader_id\x18\x03 \x01(\tR\btraderId\x12!\n" +
	"\ftimestamp_ns\x18\x04 \x01(\x03R\vtimestampNs\"\xd4\x01\n" +
	"\x12ModifyOrderRequest\x12&\n" +
	"\x0fclient_order_id\x18\x01 \x01(\tR\rclientOrderId\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1b\n" +
	"\ttrader_id\x18\x03 \x01(\tR\btraderId\x12!\n" +
	"\ftimestamp_ns\x18\x04 \x01(\x03R\vtimestampNs\x12!\n" +
	"\fnew_quantity\x18\x05 \x01(\x03R\vnewQuantity\x12\x1b\n" +
	"\tnew_price\x18\x06 \x01(\x01R\bnewPrice\"\xef\x01\n" +
	"\fOrderRequest\x129\n" +
	"\tnew_order\x18\x01 \x01(\v2\x1a.exchange_gateway.NewOrderH\x00R\bnewOrder\x12I\n" +
	"\fcancel_order\x18\x02 \x01(\v2$.exchange_gateway.CancelOrderRequestH\x00R\vcancelOrder\x12I\n" +
	"\fmodify_order\x18\x03 \x01(\v2$.exchange_gateway.ModifyOrderRequestH\x00R\vmodifyOrderB\x0e\n" +
	"\frequest_type\"\xf9\x02\n" +
	"\x05Trade\x12\x19\n" +
	"\btrade_id\x18\x01 \x01(\tR\atradeId\x12&\n" +
	"\x0fclient_order_id\x18\x02 \x01(\tR\rclientOrderId\x12*\n" +
	"\x11exchange_order_id\x18\x03 \x01(\tR\x0fexchangeOrderId\x12\x16\n" +
	"\x06symbol\x18\x04 \x01(\tR\x06symbol\x12\x14\n" +
	"\x05price\x18\x05 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x06 \x01(\x03R\bquantity\x12B\n" +
	"\x0eaggressor_side\x18\a \x01(\x0e2\x1b.exchange_gateway.OrderSideR\raggressorSide\x12!\n" +
	"\ftimestamp_ns\x18\b \x01(\x03R\vtimestampNs\x12&\n" +
	"\x0fbuyer_trader_id\x18\t \x01(\tR\rbuyerTraderId\x12(\n" +
	"\x10seller_trader_id\x18\n" +
	" \x01(\tR\x0esellerTraderId\"\xe3\x03\n" +
	"\vOrderUpdate\x12&\n" +
	"\x0fclient_order_id\x18\x01 \x01(\tR\rclientOrderId\x12*\n" +
	"\x11exchange_order_id\x18\x02 \x01(\tR\x0fexchangeOrderId\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x125\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1d.exchange_gateway.OrderStatusR\x06status\x12F\n" +
	"\x0eexecution_type\x18\x05 \x01(\x0e2\x1f.exchange_gateway.ExecutionTypeR\rexecutionType\x12'\n" +
	"\x0ffilled_quantity\x18\x06 \x01(\x03R\x0efilledQuantity\x12-\n" +
	"\x12remaining_quantity\x18\a \x01(\x03R\x11remainingQuantity\x12&\n" +
	"\x0flast_fill_price\x18\b \x01(\x01R\rlastFillPrice\x12,\n" +
	"\x12last_fill_quantity\x18\t \x01(\x03R\x10lastFillQuantity\x12!\n" +
	"\ftimestamp_ns\x18\n" +
	" \x01(\x03R\vtimestampNs\x12\x18\n" +
	"\amessage\x18\v \x01(\tR\amessage\"\x97\x01\n" +
	"\x0fGatewayResponse\x12B\n" +
	"\forder_update\x18\x01 \x01(\v2\x1d.exchange_gateway.OrderUpdateH\x00R\vorderUpdate\x12/\n" +
	"\x05trade\x18\x02 \x01(\v2\x17.exchange_gateway.TradeH\x00R\x05tradeB\x0f\n" +
	"\rresponse_type*0\n" +
	"\tOrderSide\x12\x10\n" +
	"\fSIDE_UNKNOWN\x10\x00\x12\a\n" +
	"\x03BUY\x10\x01\x12\b\n" +
	"\x04SELL\x10\x02*:\n" +
	"\tOrderType\x12\x16\n" +
	"\x12ORDER_TYPE_UNKNOWN\x10\x00\x12\t\n" +
	"\x05LIMIT\x10\x01\x12\n" +
	"\n" +
	"\x06MARKET\x10\x02*\xb6\x01\n" +
	"\vOrderStatus\x12\x18\n" +
	"\x14ORDER_STATUS_UNKNOWN\x10\x00\x12\a\n" +
	"\x03NEW\x10\x01\x12\x10\n" +
	"\fACKNOWLEDGED\x10\x02\x12\x14\n" +
	"\x10PARTIALLY_FILLED\x10\x03\x12\n" +
	"\n" +
	"\x06FILLED\x10\x04\x12\f\n" +
	"\bCANCELED\x10\x05\x12\f\n" +
	"\bREJECTED\x10\x06\x12\v\n" +
	"\aEXPIRED\x10\a\x12\x12\n" +
	"\x0ePENDING_CANCEL\x10\b\x12\x13\n" +
	"\x0fPENDING_REPLACE\x10\t*\x90\x01\n" +
	"\rExecutionType\x12\x15\n" +
	"\x11EXEC_TYPE_UNKNOWN\x10\x00\x12\x11\n" +
	"\rNEW_EXECUTION\x10\x01\x12\x13\n" +
	"\x0fTRADE_EXECUTION\x10\x02\x12\x14\n" +
	"\x10CANCEL_EXECUTION\x10\x03\x12\x14\n" +
	"\x10REJECT_EXECUTION\x10\x04\x12\x14\n" +
	"\x10MODIFY_EXECUTION\x10\x052h\n" +
	"\x0fExchangeGateway\x12U\n" +
	"\fStreamOrders\x12\x1e.exchange_gateway.OrderRequest\x1a!.exchange_gateway.GatewayResponse(\x010\x01B\x16Z\x14./exchange_gatewaypbb\x06proto3"

var (
	file_matchmux_proto_rawDescOnce sync.Once
	file_matchmux_proto_rawDescData []byte
)

func file_matchmux_proto_rawDescGZIP() []byte {
	file_matchmux_proto_rawDescOnce.Do(func() {
		file_matchmux_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_matchmux_proto_rawDesc), len(file_matchmux_proto_rawDesc)))
	})
	return file_matchmux_proto_rawDescData
}

var file_matchmux_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_matchmux_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_matchmux_proto_goTypes = []any{
	(OrderSide)(0),             // 0: exchange_gateway.OrderSide
	(OrderType)(0),             // 1: exchange_gateway.OrderType
	(OrderStatus)(0),           // 2: exchange_gateway.OrderStatus
	(ExecutionType)(0),         // 3: exchange_gateway.ExecutionType
	(*NewOrder)(nil),           // 4: exchange_gateway.NewOrder
	(*CancelOrderRequest)(nil), // 5: exchange_gateway.CancelOrderRequest
	(*ModifyOrderRequest)(nil), // 6: exchange_gateway.ModifyOrderRequest
	(*OrderRequest)(nil),       // 7: exchange_gateway.OrderRequest
	(*Trade)(nil),              // 8: exchange_gateway.Trade
	(*OrderUpdate)(nil),        // 9: exchange_gateway.OrderUpdate
	(*GatewayResponse)(nil),    // 10: exchange_gateway.GatewayResponse
}
var file_matchmux_proto_depIdxs = []int32{
	0,  // 0: exchange_gateway.NewOrder.side:type_name -> exchange_gateway.OrderSide
	1,  // 1: exchange_gateway.NewOrder.order_type:type_name -> exchange_gateway.OrderType
	4,  // 2: exchange_gateway.OrderRequest.new_order:type_name -> exchange_gateway.NewOrder
	5,  // 3: exchange_gateway.OrderRequest.cancel_order:type_name -> exchange_gateway.CancelOrderRequest
	6,  // 4: exchange_gateway.OrderRequest.modify_order:type_name -> exchange_gateway.ModifyOrderRequest
	0,  // 5: exchange_gateway.Trade.aggressor_side:type_name -> exchange_gateway.OrderSide
	2,  // 6: exchange_gateway.OrderUpdate.status:type_name -> exchange_gateway.OrderStatus
	3,  // 7: exchange_gateway.OrderUpdate.execution_type:type_name -> exchange_gateway.ExecutionType
	9,  // 8: exchange_gateway.GatewayResponse.order_update:type_name -> exchange_gateway.OrderUpdate
	8,  // 9: exchange_gateway.GatewayResponse.trade:type_name -> exchange_gateway.Trade
	7,  // 10: exchange_gateway.ExchangeGateway.StreamOrders:input_type -> exchange_gateway.OrderRequest
	10, // 11: exchange_gateway.ExchangeGateway.StreamOrders:output_type -> exchange_gateway.GatewayResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_matchmux_proto_init() }
func file_matchmux_proto_init() {
	if File_matchmux_proto != nil {
		return
	}
	file_matchmux_proto_msgTypes[3].OneofWrappers = []any{
		(*OrderRequest_NewOrder)(nil),
		(*OrderRequest_CancelOrder)(nil),
		(*OrderRequest_ModifyOrder)(nil),
	}
	file_matchmux_proto_msgTypes[6].OneofWrappers = []any{
		(*GatewayResponse_OrderUpdate)(nil),
		(*GatewayResponse_Trade)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_matchmux_proto_rawDesc), len(file_matchmux_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matchmux_proto_goTypes,
		DependencyIndexes: file_matchmux_proto_depIdxs,
		EnumInfos:         file_matchmux_proto_enumTypes,
		MessageInfos:      file_matchmux_proto_msgTypes,
	}.Build()
	File_matchmux_proto = out.File
	file_matchmux_proto_goTypes = nil
	file_matchmux_proto_depIdxs = nil
}
