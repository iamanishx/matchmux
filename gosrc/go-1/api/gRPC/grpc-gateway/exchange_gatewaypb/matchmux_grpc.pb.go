// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: matchmux.proto

package exchange_gatewaypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExchangeGateway_StreamOrders_FullMethodName = "/exchange_gateway.ExchangeGateway/StreamOrders"
)

// ExchangeGatewayClient is the client API for ExchangeGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExchangeGateway service handles all incoming order management and sends back execution reports.
type ExchangeGatewayClient interface {
	// StreamOrders enables bidirectional streaming of order requests and responses.
	// The client (broker) streams OrderRequest messages, and the server (gateway)
	// streams GatewayResponse messages.
	StreamOrders(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OrderRequest, GatewayResponse], error)
}

type exchangeGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeGatewayClient(cc grpc.ClientConnInterface) ExchangeGatewayClient {
	return &exchangeGatewayClient{cc}
}

func (c *exchangeGatewayClient) StreamOrders(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OrderRequest, GatewayResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExchangeGateway_ServiceDesc.Streams[0], ExchangeGateway_StreamOrders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrderRequest, GatewayResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExchangeGateway_StreamOrdersClient = grpc.BidiStreamingClient[OrderRequest, GatewayResponse]

// ExchangeGatewayServer is the server API for ExchangeGateway service.
// All implementations must embed UnimplementedExchangeGatewayServer
// for forward compatibility.
//
// ExchangeGateway service handles all incoming order management and sends back execution reports.
type ExchangeGatewayServer interface {
	// StreamOrders enables bidirectional streaming of order requests and responses.
	// The client (broker) streams OrderRequest messages, and the server (gateway)
	// streams GatewayResponse messages.
	StreamOrders(grpc.BidiStreamingServer[OrderRequest, GatewayResponse]) error
	mustEmbedUnimplementedExchangeGatewayServer()
}

// UnimplementedExchangeGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExchangeGatewayServer struct{}

func (UnimplementedExchangeGatewayServer) StreamOrders(grpc.BidiStreamingServer[OrderRequest, GatewayResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrders not implemented")
}
func (UnimplementedExchangeGatewayServer) mustEmbedUnimplementedExchangeGatewayServer() {}
func (UnimplementedExchangeGatewayServer) testEmbeddedByValue()                         {}

// UnsafeExchangeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeGatewayServer will
// result in compilation errors.
type UnsafeExchangeGatewayServer interface {
	mustEmbedUnimplementedExchangeGatewayServer()
}

func RegisterExchangeGatewayServer(s grpc.ServiceRegistrar, srv ExchangeGatewayServer) {
	// If the following call pancis, it indicates UnimplementedExchangeGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExchangeGateway_ServiceDesc, srv)
}

func _ExchangeGateway_StreamOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangeGatewayServer).StreamOrders(&grpc.GenericServerStream[OrderRequest, GatewayResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExchangeGateway_StreamOrdersServer = grpc.BidiStreamingServer[OrderRequest, GatewayResponse]

// ExchangeGateway_ServiceDesc is the grpc.ServiceDesc for ExchangeGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange_gateway.ExchangeGateway",
	HandlerType: (*ExchangeGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOrders",
			Handler:       _ExchangeGateway_StreamOrders_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "matchmux.proto",
}
