syntax = "proto3";

package exchange_gateway;

option go_package = "./exchange_gatewaypb"; 

// --- Enums ---

// OrderSide defines whether an order is a buy or a sell.
enum OrderSide {
  SIDE_UNKNOWN = 0;
  BUY = 1;
  SELL = 2;
}

// OrderType defines the type of order (e.g., Market, Limit).
enum OrderType {
  ORDER_TYPE_UNKNOWN = 0;
  LIMIT = 1; // An order to buy or sell at a specific price or better.
  MARKET = 2; // An order to buy or sell immediately at the best available price.
  // Add other types as needed: STOP, STOP_LIMIT, etc.
}

// OrderStatus defines the current state of an order in the matching engine.
enum OrderStatus {
  ORDER_STATUS_UNKNOWN = 0;
  NEW = 1;             // Order received by the gateway.
  ACKNOWLEDGED = 2;    // Order successfully acknowledged by the matching engine.
  PARTIALLY_FILLED = 3; // Order has been partially matched and filled.
  FILLED = 4;          // Order has been completely matched and filled.
  CANCELED = 5;        // Order has been successfully canceled.
  REJECTED = 6;        // Order was rejected due to validation or risk checks.
  EXPIRED = 7;         // Order expired (e.g., Good-Till-Day orders at end of day).
  PENDING_CANCEL = 8;  // Cancellation request received, but not yet processed.
  PENDING_REPLACE = 9; // Modification request received, but not yet processed.
}

// ExecutionType defines the type of execution report.
enum ExecutionType {
  EXEC_TYPE_UNKNOWN = 0;
  NEW_EXECUTION = 1;    // Initial acknowledgement of a new order.
  TRADE_EXECUTION = 2;  // A trade (fill) occurred.
  CANCEL_EXECUTION = 3; // An order was canceled.
  REJECT_EXECUTION = 4; // An order was rejected.
  MODIFY_EXECUTION = 5; // An order was modified.
}

// --- Request Messages (from Broker to Gateway) ---

// NewOrder represents a request to place a new order.
message NewOrder {
  string client_order_id = 1; // Unique ID assigned by the client (broker).
  string symbol = 2;          // Trading instrument (e.g., "AAPL", "INFY").
  OrderSide side = 3;         // BUY or SELL.
  OrderType order_type = 4;   // LIMIT or MARKET.
  double price = 5;           // Price for LIMIT orders. Ignored for MARKET.
  int64 quantity = 6;         // Total quantity of shares/contracts.
  string trader_id = 7;       // Identifier for the client/trader.
  int64 timestamp_ns = 8;     // Nanosecond timestamp when order was created by client.
  // Add Time-in-Force, etc., as needed (e.g., GTC, IOC, FOK)
}

// CancelOrderRequest represents a request to cancel an existing order.
message CancelOrderRequest {
  string client_order_id = 1; // Original client order ID of the order to cancel.
  string symbol = 2;          // Symbol of the order to cancel.
  string trader_id = 3;       // Identifier for the client/trader.
  int64 timestamp_ns = 4;     // Nanosecond timestamp when cancel request was created.
}

// ModifyOrderRequest represents a request to modify an existing order (e.g., quantity, price).
message ModifyOrderRequest {
  string client_order_id = 1; // Original client order ID of the order to modify.
  string symbol = 2;          // Symbol of the order to modify.
  string trader_id = 3;       // Identifier for the client/trader.
  int64 timestamp_ns = 4;     // Nanosecond timestamp when modify request was created.
  
  // Fields to modify (use wrapper types for optionality if needed, or check for non-zero values)
  int64 new_quantity = 5;     // New total quantity for the order.
  double new_price = 6;       // New price for a limit order.
  // Only modify if new_quantity > 0 and new_price > 0 for simplicity,
  // or use google.protobuf.Int64Value, google.protobuf.DoubleValue for explicit optionality.
}

// OrderRequest is a oneof message that encapsulates all possible request types from the client.
message OrderRequest {
  oneof request_type {
    NewOrder new_order = 1;
    CancelOrderRequest cancel_order = 2;
    ModifyOrderRequest modify_order = 3;
    // Add other request types like inquire, heartbeat etc.
  }
}

// --- Response Messages (from Gateway to Broker) ---

// Trade represents a successful match and execution.
message Trade {
  string trade_id = 1;          // Unique ID for the trade (generated by the exchange).
  string client_order_id = 2;   // Original client order ID that resulted in this trade.
  string exchange_order_id = 3; // Unique ID assigned by the exchange for the order.
  string symbol = 4;            // Trading instrument.
  double price = 5;             // Execution price.
  int64 quantity = 6;           // Executed quantity.
  OrderSide aggressor_side = 7; // Side of the order that initiated the trade (e.g., Market order aggresses resting Limit order).
  int64 timestamp_ns = 8;       // Nanosecond timestamp when trade occurred.
  string buyer_trader_id = 9;   // Trader ID of the buyer.
  string seller_trader_id = 10; // Trader ID of the seller.
}

// OrderUpdate provides status updates for an order.
message OrderUpdate {
  string client_order_id = 1;    // Original client order ID.
  string exchange_order_id = 2;  // Unique ID assigned by the exchange for the order.
  string symbol = 3;             // Trading instrument.
  OrderStatus status = 4;        // Current status of the order.
  ExecutionType execution_type = 5; // Type of execution report.
  int64 filled_quantity = 6;     // Total quantity filled so far.
  int64 remaining_quantity = 7;  // Quantity still open.
  double last_fill_price = 8;    // Price of the last fill (if applicable).
  int64 last_fill_quantity = 9;  // Quantity of the last fill (if applicable).
  int64 timestamp_ns = 10;       // Nanosecond timestamp of this update.
  string message = 11;           // Optional descriptive message (e.g., rejection reason).
}

// GatewayResponse is a oneof message that encapsulates all possible response types to the client.
message GatewayResponse {
  oneof response_type {
    OrderUpdate order_update = 1;
    Trade trade = 2;
    // Add other response types like heartbeat acknowledgements, etc.
  }
}

// --- Service Definition ---

// ExchangeGateway service handles all incoming order management and sends back execution reports.
service ExchangeGateway {
  // StreamOrders enables bidirectional streaming of order requests and responses.
  // The client (broker) streams OrderRequest messages, and the server (gateway)
  // streams GatewayResponse messages.
  rpc StreamOrders (stream OrderRequest) returns (stream GatewayResponse);
}













