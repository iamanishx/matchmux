// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ipc/ent/otp"
	"ipc/ent/users"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Otp is the model entity for the Otp schema.
type Otp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OtpQuery when eager-loading is set.
	Edges        OtpEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OtpEdges holds the relations/edges for other nodes in the graph.
type OtpEdges struct {
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OtpEdges) UsersOrErr() (*Users, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Otp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case otp.FieldID:
			values[i] = new(sql.NullInt64)
		case otp.FieldCode:
			values[i] = new(sql.NullString)
		case otp.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case otp.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Otp fields.
func (o *Otp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case otp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case otp.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				o.Code = value.String
			}
		case otp.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				o.ExpiresAt = value.Time
			}
		case otp.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				o.UserID = *value
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Otp.
// This includes values selected through modifiers, order, etc.
func (o *Otp) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Otp entity.
func (o *Otp) QueryUsers() *UsersQuery {
	return NewOtpClient(o.config).QueryUsers(o)
}

// Update returns a builder for updating this Otp.
// Note that you need to call Otp.Unwrap() before calling this method if this Otp
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Otp) Update() *OtpUpdateOne {
	return NewOtpClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Otp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Otp) Unwrap() *Otp {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Otp is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Otp) String() string {
	var builder strings.Builder
	builder.WriteString("Otp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("code=")
	builder.WriteString(o.Code)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(o.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Otps is a parsable slice of Otp.
type Otps []*Otp
