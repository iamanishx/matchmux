// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ipc/ent/migrate"

	"ipc/ent/orders"
	"ipc/ent/otp"
	"ipc/ent/trades"
	"ipc/ent/users"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Orders is the client for interacting with the Orders builders.
	Orders *OrdersClient
	// Otp is the client for interacting with the Otp builders.
	Otp *OtpClient
	// Trades is the client for interacting with the Trades builders.
	Trades *TradesClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Orders = NewOrdersClient(c.config)
	c.Otp = NewOtpClient(c.config)
	c.Trades = NewTradesClient(c.config)
	c.Users = NewUsersClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Orders: NewOrdersClient(cfg),
		Otp:    NewOtpClient(cfg),
		Trades: NewTradesClient(cfg),
		Users:  NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Orders: NewOrdersClient(cfg),
		Otp:    NewOtpClient(cfg),
		Trades: NewTradesClient(cfg),
		Users:  NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Orders.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Orders.Use(hooks...)
	c.Otp.Use(hooks...)
	c.Trades.Use(hooks...)
	c.Users.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Orders.Intercept(interceptors...)
	c.Otp.Intercept(interceptors...)
	c.Trades.Intercept(interceptors...)
	c.Users.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OrdersMutation:
		return c.Orders.mutate(ctx, m)
	case *OtpMutation:
		return c.Otp.mutate(ctx, m)
	case *TradesMutation:
		return c.Trades.mutate(ctx, m)
	case *UsersMutation:
		return c.Users.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// OrdersClient is a client for the Orders schema.
type OrdersClient struct {
	config
}

// NewOrdersClient returns a client for the Orders from the given config.
func NewOrdersClient(c config) *OrdersClient {
	return &OrdersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orders.Hooks(f(g(h())))`.
func (c *OrdersClient) Use(hooks ...Hook) {
	c.hooks.Orders = append(c.hooks.Orders, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orders.Intercept(f(g(h())))`.
func (c *OrdersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Orders = append(c.inters.Orders, interceptors...)
}

// Create returns a builder for creating a Orders entity.
func (c *OrdersClient) Create() *OrdersCreate {
	mutation := newOrdersMutation(c.config, OpCreate)
	return &OrdersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Orders entities.
func (c *OrdersClient) CreateBulk(builders ...*OrdersCreate) *OrdersCreateBulk {
	return &OrdersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrdersClient) MapCreateBulk(slice any, setFunc func(*OrdersCreate, int)) *OrdersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrdersCreateBulk{err: fmt.Errorf("calling to OrdersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrdersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrdersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Orders.
func (c *OrdersClient) Update() *OrdersUpdate {
	mutation := newOrdersMutation(c.config, OpUpdate)
	return &OrdersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrdersClient) UpdateOne(o *Orders) *OrdersUpdateOne {
	mutation := newOrdersMutation(c.config, OpUpdateOne, withOrders(o))
	return &OrdersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrdersClient) UpdateOneID(id int) *OrdersUpdateOne {
	mutation := newOrdersMutation(c.config, OpUpdateOne, withOrdersID(id))
	return &OrdersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Orders.
func (c *OrdersClient) Delete() *OrdersDelete {
	mutation := newOrdersMutation(c.config, OpDelete)
	return &OrdersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrdersClient) DeleteOne(o *Orders) *OrdersDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrdersClient) DeleteOneID(id int) *OrdersDeleteOne {
	builder := c.Delete().Where(orders.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrdersDeleteOne{builder}
}

// Query returns a query builder for Orders.
func (c *OrdersClient) Query() *OrdersQuery {
	return &OrdersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrders},
		inters: c.Interceptors(),
	}
}

// Get returns a Orders entity by its id.
func (c *OrdersClient) Get(ctx context.Context, id int) (*Orders, error) {
	return c.Query().Where(orders.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrdersClient) GetX(ctx context.Context, id int) *Orders {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrdersClient) Hooks() []Hook {
	return c.hooks.Orders
}

// Interceptors returns the client interceptors.
func (c *OrdersClient) Interceptors() []Interceptor {
	return c.inters.Orders
}

func (c *OrdersClient) mutate(ctx context.Context, m *OrdersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrdersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrdersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrdersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrdersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Orders mutation op: %q", m.Op())
	}
}

// OtpClient is a client for the Otp schema.
type OtpClient struct {
	config
}

// NewOtpClient returns a client for the Otp from the given config.
func NewOtpClient(c config) *OtpClient {
	return &OtpClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `otp.Hooks(f(g(h())))`.
func (c *OtpClient) Use(hooks ...Hook) {
	c.hooks.Otp = append(c.hooks.Otp, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `otp.Intercept(f(g(h())))`.
func (c *OtpClient) Intercept(interceptors ...Interceptor) {
	c.inters.Otp = append(c.inters.Otp, interceptors...)
}

// Create returns a builder for creating a Otp entity.
func (c *OtpClient) Create() *OtpCreate {
	mutation := newOtpMutation(c.config, OpCreate)
	return &OtpCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Otp entities.
func (c *OtpClient) CreateBulk(builders ...*OtpCreate) *OtpCreateBulk {
	return &OtpCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OtpClient) MapCreateBulk(slice any, setFunc func(*OtpCreate, int)) *OtpCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OtpCreateBulk{err: fmt.Errorf("calling to OtpClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OtpCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OtpCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Otp.
func (c *OtpClient) Update() *OtpUpdate {
	mutation := newOtpMutation(c.config, OpUpdate)
	return &OtpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OtpClient) UpdateOne(o *Otp) *OtpUpdateOne {
	mutation := newOtpMutation(c.config, OpUpdateOne, withOtp(o))
	return &OtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OtpClient) UpdateOneID(id int) *OtpUpdateOne {
	mutation := newOtpMutation(c.config, OpUpdateOne, withOtpID(id))
	return &OtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Otp.
func (c *OtpClient) Delete() *OtpDelete {
	mutation := newOtpMutation(c.config, OpDelete)
	return &OtpDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OtpClient) DeleteOne(o *Otp) *OtpDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OtpClient) DeleteOneID(id int) *OtpDeleteOne {
	builder := c.Delete().Where(otp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OtpDeleteOne{builder}
}

// Query returns a query builder for Otp.
func (c *OtpClient) Query() *OtpQuery {
	return &OtpQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOtp},
		inters: c.Interceptors(),
	}
}

// Get returns a Otp entity by its id.
func (c *OtpClient) Get(ctx context.Context, id int) (*Otp, error) {
	return c.Query().Where(otp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OtpClient) GetX(ctx context.Context, id int) *Otp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Otp.
func (c *OtpClient) QueryUsers(o *Otp) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(otp.Table, otp.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, otp.UsersTable, otp.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OtpClient) Hooks() []Hook {
	return c.hooks.Otp
}

// Interceptors returns the client interceptors.
func (c *OtpClient) Interceptors() []Interceptor {
	return c.inters.Otp
}

func (c *OtpClient) mutate(ctx context.Context, m *OtpMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OtpCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OtpUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OtpDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Otp mutation op: %q", m.Op())
	}
}

// TradesClient is a client for the Trades schema.
type TradesClient struct {
	config
}

// NewTradesClient returns a client for the Trades from the given config.
func NewTradesClient(c config) *TradesClient {
	return &TradesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trades.Hooks(f(g(h())))`.
func (c *TradesClient) Use(hooks ...Hook) {
	c.hooks.Trades = append(c.hooks.Trades, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trades.Intercept(f(g(h())))`.
func (c *TradesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Trades = append(c.inters.Trades, interceptors...)
}

// Create returns a builder for creating a Trades entity.
func (c *TradesClient) Create() *TradesCreate {
	mutation := newTradesMutation(c.config, OpCreate)
	return &TradesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Trades entities.
func (c *TradesClient) CreateBulk(builders ...*TradesCreate) *TradesCreateBulk {
	return &TradesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TradesClient) MapCreateBulk(slice any, setFunc func(*TradesCreate, int)) *TradesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TradesCreateBulk{err: fmt.Errorf("calling to TradesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TradesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TradesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Trades.
func (c *TradesClient) Update() *TradesUpdate {
	mutation := newTradesMutation(c.config, OpUpdate)
	return &TradesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TradesClient) UpdateOne(t *Trades) *TradesUpdateOne {
	mutation := newTradesMutation(c.config, OpUpdateOne, withTrades(t))
	return &TradesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TradesClient) UpdateOneID(id int) *TradesUpdateOne {
	mutation := newTradesMutation(c.config, OpUpdateOne, withTradesID(id))
	return &TradesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Trades.
func (c *TradesClient) Delete() *TradesDelete {
	mutation := newTradesMutation(c.config, OpDelete)
	return &TradesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TradesClient) DeleteOne(t *Trades) *TradesDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TradesClient) DeleteOneID(id int) *TradesDeleteOne {
	builder := c.Delete().Where(trades.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TradesDeleteOne{builder}
}

// Query returns a query builder for Trades.
func (c *TradesClient) Query() *TradesQuery {
	return &TradesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrades},
		inters: c.Interceptors(),
	}
}

// Get returns a Trades entity by its id.
func (c *TradesClient) Get(ctx context.Context, id int) (*Trades, error) {
	return c.Query().Where(trades.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TradesClient) GetX(ctx context.Context, id int) *Trades {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TradesClient) Hooks() []Hook {
	return c.hooks.Trades
}

// Interceptors returns the client interceptors.
func (c *TradesClient) Interceptors() []Interceptor {
	return c.inters.Trades
}

func (c *TradesClient) mutate(ctx context.Context, m *TradesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TradesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TradesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TradesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TradesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Trades mutation op: %q", m.Op())
	}
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `users.Intercept(f(g(h())))`.
func (c *UsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Users = append(c.inters.Users, interceptors...)
}

// Create returns a builder for creating a Users entity.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsersClient) MapCreateBulk(slice any, setFunc func(*UsersCreate, int)) *UsersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsersCreateBulk{err: fmt.Errorf("calling to UsersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id uuid.UUID) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsersClient) DeleteOneID(id uuid.UUID) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id uuid.UUID) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id uuid.UUID) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOtp queries the otp edge of a Users.
func (c *UsersClient) QueryOtp(u *Users) *OtpQuery {
	query := (&OtpClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(otp.Table, otp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.OtpTable, users.OtpColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}

// Interceptors returns the client interceptors.
func (c *UsersClient) Interceptors() []Interceptor {
	return c.inters.Users
}

func (c *UsersClient) mutate(ctx context.Context, m *UsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Users mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Orders, Otp, Trades, Users []ent.Hook
	}
	inters struct {
		Orders, Otp, Trades, Users []ent.Interceptor
	}
)
